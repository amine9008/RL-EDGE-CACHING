//
// Generated file, do not edit! Created by nedtool 5.6 from veins/modules/application/traci/Request.msg.
//

#ifndef __VEINS_REQUEST_M_H
#define __VEINS_REQUEST_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef VEINS_API
#  if defined(VEINS_EXPORT)
#    define VEINS_API  OPP_DLLEXPORT
#  elif defined(VEINS_IMPORT)
#    define VEINS_API  OPP_DLLIMPORT
#  else
#    define VEINS_API
#  endif
#endif


namespace veins {

class Request;
} // namespace veins

#include "veins/base/utils/Coord_m.h" // import veins.base.utils.Coord

#include "veins/modules/messages/BaseFrame1609_4_m.h" // import veins.modules.messages.BaseFrame1609_4

#include "veins/base/utils/SimpleAddress_m.h" // import veins.base.utils.SimpleAddress


namespace veins {

/**
 * Class generated from <tt>veins/modules/application/traci/Request.msg:22</tt> by nedtool.
 * <pre>
 * packet Request extends BaseFrame1609_4
 * {
 *     LAddress::L2Type senderAddress = -1;
 *     int serial = 0;
 * 
 *     //if sending request
 *     int idMovieWants;
 *     string receiverType; //if v2v,v2r,v2m
 * 
 *     //if sending data
 *     int idMovieNew;
 *     float durationNew;
 *     string demoData;
 * 
 * 
 *     int idSender;
 * 
 * }
 * </pre>
 */
class VEINS_API Request : public ::veins::BaseFrame1609_4
{
  protected:
    LAddress::L2Type senderAddress = -1;
    int serial = 0;
    int idMovieWants = 0;
    omnetpp::opp_string receiverType;
    int idMovieNew = 0;
    float durationNew = 0;
    omnetpp::opp_string demoData;
    int idSender = 0;

  private:
    void copy(const Request& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Request&);

  public:
    Request(const char *name=nullptr, short kind=0);
    Request(const Request& other);
    virtual ~Request();
    Request& operator=(const Request& other);
    virtual Request *dup() const override {return new Request(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const LAddress::L2Type& getSenderAddress() const;
    virtual LAddress::L2Type& getSenderAddressForUpdate() { return const_cast<LAddress::L2Type&>(const_cast<Request*>(this)->getSenderAddress());}
    virtual void setSenderAddress(const LAddress::L2Type& senderAddress);
    virtual int getSerial() const;
    virtual void setSerial(int serial);
    virtual int getIdMovieWants() const;
    virtual void setIdMovieWants(int idMovieWants);
    virtual const char * getReceiverType() const;
    virtual void setReceiverType(const char * receiverType);
    virtual int getIdMovieNew() const;
    virtual void setIdMovieNew(int idMovieNew);
    virtual float getDurationNew() const;
    virtual void setDurationNew(float durationNew);
    virtual const char * getDemoData() const;
    virtual void setDemoData(const char * demoData);
    virtual int getIdSender() const;
    virtual void setIdSender(int idSender);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Request& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Request& obj) {obj.parsimUnpack(b);}

} // namespace veins

#endif // ifndef __VEINS_REQUEST_M_H

